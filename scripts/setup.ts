#!/usr/bin/env node

/**
 * Setup Script for Abstain App
 * 
 * This script helps you set up the application with all necessary configurations.
 */

import fs from 'fs';
import path from 'path';
import readline from 'readline';
import { execSync } from 'child_process';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt: string): Promise<string> {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function main() {
  console.log('\n🚀 Welcome to Abstain App Setup\n');
  console.log('This script will help you configure your application.\n');

  // Check if .env.local already exists
  const envPath = path.join(process.cwd(), '.env.local');
  if (fs.existsSync(envPath)) {
    const overwrite = await question('⚠️  .env.local already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('Setup cancelled.');
      rl.close();
      return;
    }
  }

  console.log('\n📝 Please provide the following information:\n');

  // Required configurations
  const geminiKey = await question('GEMINI_API_KEY (required): ');
  const cloudName = await question('CLOUDINARY_CLOUD_NAME (required): ');
  const cloudKey = await question('CLOUDINARY_API_KEY (required): ');
  const cloudSecret = await question('CLOUDINARY_API_SECRET (required): ');

  console.log('\n💳 Credit System Configuration:\n');
  console.log('Current setup: 0 credits per operation (free testing)');
  const setupForProduction = await question('Setup for production? (y/N): ');

  const creditCostAnalysis = setupForProduction.toLowerCase() === 'y' ? '0' : '0';
  const creditCostGeneration = setupForProduction.toLowerCase() === 'y' ? '1' : '0';
  const enforceCredits = setupForProduction.toLowerCase() === 'y' ? 'true' : 'false';

  console.log('\n🔧 Optional Features:\n');
  const setupRedis = await question('Setup Redis for caching? (y/N): ');
  
  let redisUrl = '';
  let redisToken = '';
  if (setupRedis.toLowerCase() === 'y') {
    redisUrl = await question('REDIS_URL: ');
    redisToken = await question('REDIS_TOKEN: ');
  }

  const setupSentry = await question('Setup Sentry for monitoring? (y/N): ');
  let sentryDsn = '';
  if (setupSentry.toLowerCase() === 'y') {
    sentryDsn = await question('SENTRY_DSN: ');
  }

  // Build .env.local content
  const envContent = `# ============================================
# ENVIRONMENT CONFIGURATION
# Generated by setup script on ${new Date().toISOString()}
# ============================================
NODE_ENV=development

# ============================================
# AI SERVICES (REQUIRED)
# ============================================
GEMINI_API_KEY=${geminiKey}
GEMINI_MODEL=gemini-2.5-flash
GEMINI_IMAGE_MODEL=gemini-2.5-flash-image

# ============================================
# CLOUDINARY (REQUIRED)
# ============================================
CLOUDINARY_CLOUD_NAME=${cloudName}
CLOUDINARY_API_KEY=${cloudKey}
CLOUDINARY_API_SECRET=${cloudSecret}

# ============================================
# CREDITS SYSTEM
# ============================================
CREDIT_COST_ANALYSIS=${creditCostAnalysis}
CREDIT_COST_GENERATION=${creditCostGeneration}
STARTING_CREDITS=999
ENFORCE_CREDITS=${enforceCredits}

# ============================================
# RATE LIMITING
# ============================================
RATE_LIMIT_ENABLED=true
RATE_LIMIT_MAX=10
RATE_LIMIT_WINDOW=3600

# ============================================
# CACHE
# ============================================
CACHE_ENABLED=true
CACHE_TTL=604800
${redisUrl ? `UPSTASH_REDIS_REST_URL=${redisUrl}` : '# UPSTASH_REDIS_REST_URL='}
${redisToken ? `UPSTASH_REDIS_REST_TOKEN=${redisToken}` : '# UPSTASH_REDIS_REST_TOKEN='}

# ============================================
# IMAGE VALIDATION
# ============================================
MAX_IMAGE_SIZE_MB=10
MIN_IMAGE_WIDTH=512
MIN_IMAGE_HEIGHT=512
MAX_IMAGE_WIDTH=4096
MAX_IMAGE_HEIGHT=4096
ALLOWED_IMAGE_TYPES=image/jpeg,image/png,image/webp

# ============================================
# AI TIMEOUTS & RETRIES
# ============================================
AI_ANALYSIS_TIMEOUT=45000
AI_GENERATION_TIMEOUT=60000
AI_MAX_RETRIES=2
AI_RETRY_DELAY=2000
AI_CIRCUIT_THRESHOLD=5
AI_CIRCUIT_RESET=30000

# ============================================
# FEATURES
# ============================================
MODERATION_ENABLED=true
WATERMARK_ENABLED=true
ANALYTICS_ENABLED=false

# ============================================
# COMPLIANCE
# ============================================
DELETE_IMAGES_AFTER=false
IMAGE_RETENTION_DAYS=30
PRIVACY_MODE=${setupForProduction.toLowerCase() === 'y' ? 'true' : 'false'}

# ============================================
# MONITORING (OPTIONAL)
# ============================================
MONITORING_ENABLED=${sentryDsn ? 'true' : 'false'}
${sentryDsn ? `SENTRY_DSN=${sentryDsn}` : '# SENTRY_DSN='}
LOG_LEVEL=info

# ============================================
# AUTHENTICATION (FOR MAIN PLATFORM INTEGRATION)
# ============================================
AUTH_ENABLED=false
AUTH_USER_HEADER=x-user-id
AUTH_SESSION_HEADER=x-session-token

# ============================================
# LOCALE
# ============================================
DEFAULT_LOCALE=es
`;

  // Write .env.local
  fs.writeFileSync(envPath, envContent);

  console.log('\n✅ Configuration saved to .env.local\n');

  // Install optional dependencies if needed
  if (setupRedis.toLowerCase() === 'y' || setupSentry.toLowerCase() === 'y') {
    console.log('📦 Installing optional dependencies...\n');
        
    try {
      if (setupRedis.toLowerCase() === 'y') {
        console.log('Installing @upstash/redis...');
        execSync('npm install @upstash/redis', { stdio: 'inherit' });
      }
      
      if (setupSentry.toLowerCase() === 'y') {
        console.log('Installing @sentry/nextjs...');
        execSync('npm install @sentry/nextjs', { stdio: 'inherit' });
      }
      
      console.log('\n✅ Optional dependencies installed\n');
    } catch {
      console.error('⚠️  Failed to install optional dependencies. You can install them manually.');
    }
  }

  // Validate configuration
  console.log('🔍 Validating configuration...\n');
  
  const configPath = path.join(process.cwd(), 'lib', 'config', 'app.config.ts');
  if (fs.existsSync(configPath)) {
    console.log('✅ Configuration file found');
  } else {
    console.log('⚠️  Configuration file not found. Make sure you have the latest code.');
  }

  console.log('\n🎉 Setup complete!\n');
  console.log('Next steps:');
  console.log('  1. Review your .env.local file');
  console.log('  2. Run: npm run dev');
  console.log('  3. Test the application');
  console.log('  4. Read docs/IMPLEMENTATION.md for more details\n');

  rl.close();
}

main().catch(() => {
  console.error('Error during setup: (see stack)');
  rl.close();
  process.exit(1);
});
